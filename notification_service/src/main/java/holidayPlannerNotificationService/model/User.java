package holidayPlannerNotificationService.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import holidayPlannerNotificationService.rest.dto.UserRegistrationDTO;
import org.springframework.security.crypto.password.PasswordEncoder;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

@Entity
//cannot be User
@Table(name = "CLIENT")
@NamedQueries({
        @NamedQuery(name = "User.findByUsername", query = "SELECT u FROM User u WHERE u.username = :username"),
        @NamedQuery(name = "User.findByUserId", query = "SELECT u FROM User u WHERE u.userId = :userId")
})
public class User extends AbstractEntity {
    @Basic(optional = false)
    @Column(nullable = false)
    private boolean admin = false;

    @Basic(optional = false)
    @Column(nullable = false, unique = true)
    private String username;

    @JsonIgnore
    @Basic(optional = false)
    @Column(nullable = false)
    private String password;

    @Enumerated(EnumType.STRING)
    private Role role;

    // IMPORTANT: the following IDs refer to IDs from UserService, so we won't be using
    // user.getId() in this service that is auto generated by db and isn't in sync with UserService
    private Integer groupId;
    private Integer teamId;
    private Integer userId;

    public boolean isAdmin() {
        return admin;
    }

    public User() {
        this.role = Role.GUEST;
    }

    public Role getRole() {
        return role;
    }

    public void setRole() {
        if (isAdmin()) {
            this.role = Role.ADMIN;
        } else{
            this.role = Role.USER;
        }
    }

    public void setRole(Role role) {
        this.role = role;
        if (role == Role.ADMIN ){
            setAdmin(true);
        } else{
            setAdmin(false);
        }
    }

    public void setAdmin(boolean admin) {
        this.admin = admin;
        setRole();
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public void encodePassword(PasswordEncoder encoder) {
        this.password = encoder.encode(password);
    }

    public void erasePassword() {
        this.password = null;
    }

    public Integer getGroupId() {
        return groupId;
    }

    public void setGroupId(Integer groupId) {
        this.groupId = groupId;
    }

    public Integer getTeamId() {
        return teamId;
    }

    public void setTeamId(Integer teamId) {
        this.teamId = teamId;
    }

    public Integer getUserId() {
        return userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    public static User fromDTO(UserRegistrationDTO dto){
        User user = new User();
        user.setPassword(dto.getPassword());
        user.setUserId(dto.getUserId());
        user.setUsername(dto.getUsername());
        return user;
    }
}
